---

stage: STAGE_NAME  # prod/stage/dev

web_host: DOMAIN_NAME or IP

metaspace_repo_url: https://github.com/metaspace2020/metaspace
metaspace_branch: master
metaspace_home: /opt/dev/metaspace

# SOFTWARE CONFIGURATION

time_zone_name: UTC  # Ubuntu timezone name

aws_access_key_id: "{{ vault_aws_access_key_id }}"
aws_secret_access_key: "{{ vault_aws_secret_access_key }}"
aws_key_name: "{{ vault_aws_key_name }}"
aws_region: eu-west-1

notification_email: "{{ vault_notification_email }}"

web_public_url: "http://{{ hostvars['web-1'].ansible_ssh_host }}"  # specify manually in production

postgres_version: 9.5
postgres_port: 5432
postgres_drop_create: false

elasticsearch_version: 5.5.2

kibana_version: "{{ elasticsearch_version }}"
kibana_user: "{{ vault_kibana_user }}"
kibana_password: "{{ vault_kibana_password }}"
kibana_es_port: 9200  # kibana runs on the same host and connects to ES directly

rabbitmq_host: "{{ hostvars['web-1'].ansible_ec2_local_ipv4 }}"
rabbitmq_user: "{{ vault_rabbitmq_user }}"
rabbitmq_password: "{{ vault_rabbitmq_password }}"

miniconda_version: latest
miniconda_python: 3
miniconda_prefix: /opt/dev/miniconda3
miniconda_env:
  name: sm
  channels:
    - conda-forge
  dependencies:
    - python=3.6
    - nomkl
    - libgcc

web_redis:
  host: localhost
  port: 6379

sm_postgres_host: "{{ hostvars['web-1'].ansible_ec2_local_ipv4 }}"
sm_postgres_password: "{{ vault_sm_postgres_password }}"
sm_home: "{{ metaspace_home }}/metaspace/engine"
sm_s3_path: ENGINE_BUCKET_NAME  # bucket for sm engine tmp data in "s3a://bucket-name/tmp" form
sm_img_service_url: "http://{{ hostvars['web-1'].ansible_ec2_local_ipv4 }}:4201"
sm_es_host: "{{ hostvars['web-1'].ansible_ec2_local_ipv4 }}"
sm_es_port: 9210  # cannot be 9200 (nginx proxied)
sm_es_user: "{{ vault_sm_es_user }}"
sm_es_password: "{{ vault_sm_es_password }}"
sm_send_email: true
sm_create_schema: true  # set to false to avoid database dropping during provisioning
sm_create_es_index: true  # set to false to avoid Elasticsearch index dropping during provisioning
sm_isotope_storage_path: "{{ vault_sm_isotope_storage_path }}"  # cache path for generated centroids
sm_default_adducts:
  "+": ["+H", "+Na", "+K"]
  "-": ["-H", "+Cl"]
sm_redis:
  host: "{{ hostvars['web-1'].ansible_ec2_local_ipv4 }}"
  port: 6379

off_sample_api_endpoint: OFF_SAMPLE_API_ENDPOINT

sm_ansible_home: "{{ metaspace_home }}/ansible"
sm_cluster_autostart_ansible_version: 2.6.2
sm_cluster_autostart_python: "{{ miniconda_prefix }}/envs/{{ miniconda_env.name }}/bin/python"
sm_cluster_autostart_redis:
  host: "{{ web_redis.host }}"
  port: "{{ web_redis.port }}"

mol_db_home: "{{ metaspace_home }}/metaspace/mol-db"
mol_db_url: "http://{{ hostvars['web-1'].ansible_ec2_local_ipv4 }}:5001/v1"
mol_db_postgres_pass: "{{ vault_mol_db_postgres_password }}"
mol_db_image_dir: /var/www/mol-images
mol_db_miniconda_env:
  name: mol-db
mol_db_import_databases: true  # set to false to avoid triggering database import
mol_db_import_mol_images: true  # set to false to avoid reimporting all molecular images
mol_db_image_archives:
  - name: HMDB
    path: https://s3-eu-west-1.amazonaws.com/sm-mol-db/mol-images/mol-images-hmdb.tar.xz
# uncomment below for other databases
#  - name: ChEBI
#    path: https://s3-eu-west-1.amazonaws.com/sm-mol-db/mol-images/mol-images-chebi.tar.xz
#  - name: LipidMaps
#    path: https://s3-eu-west-1.amazonaws.com/sm-mol-db/mol-images/mol-images-lipid-maps.tar.xz
#  - name: SwissLipids
#    path: https://s3-eu-west-1.amazonaws.com/sm-mol-db/mol-images/mol-images-swiss-lipids.tar.xz
#  - name: PAMDB
#    path: https://s3-eu-west-1.amazonaws.com/sm-mol-db/mol-images/mol-images-pamdb.tar.xz
#  - name: ECMDB
#    path: https://s3-eu-west-1.amazonaws.com/sm-mol-db/mol-images/mol-images-ecmdb.tar.xz
mol_db_imports:
  - url: "https://s3-eu-west-1.amazonaws.com/sm-mol-db/db_files/hmdb/hmdb_4.tsv"
    name: "HMDB-v4"
    version: "2018-03-08"
# uncomment below for other databases
#  - url: "https://s3-eu-west-1.amazonaws.com/sm-mol-db/db_files/hmdb/hmdb_2-5.tsv"
#    name: "HMDB-v2.5"
#    version: "2018-03-08"
#  - url: "https://s3-eu-west-1.amazonaws.com/sm-mol-db/db_files/hmdb/hmdb_4-endogenous.tsv"
#    name: "HMDB-v4-endogenous"
#    version: "2018-03-08"
#  - url: "https://s3-eu-west-1.amazonaws.com/sm-mol-db/db_files/hmdb/hmdb_2-5-cotton.tsv"
#    name: "HMDB-v4-cotton"
#    version: "2018-04-27"
#  - url: "https://s3-eu-west-1.amazonaws.com/sm-mol-db/db_files/brachemdb/BraChemDB_2018-03_empty_inchi.tsv"
#    name: "BraChemDB-2018-01"
#    version: "2018-03-08"
#  - url: "https://s3-eu-west-1.amazonaws.com/sm-mol-db/db_files/chebi/chebi_2018-01.tsv"
#    name: "ChEBI-2018-01"
#    version: "2018-03-08"
#  - url: "https://s3-eu-west-1.amazonaws.com/sm-mol-db/db_files/lipidmaps/lipidmaps_2017-12-12.tsv"
#    name: "LipidMaps-2017-12-12"
#    version: "2018-03-08"
#  - url: "https://s3-eu-west-1.amazonaws.com/sm-mol-db/db_files/pamdb/pamdb_1-0.tsv"
#    name: "PAMDB-v1.0"
#    version: "2018-03-08"
#  - url: "https://s3-eu-west-1.amazonaws.com/sm-mol-db/db_files/swisslipids/swisslipids_2018-02-02.tsv"
#    name: "SwissLipids-2018-02-02"
#    version: "2018-03-08"
#  - url: "https://s3-eu-west-1.amazonaws.com/sm-mol-db/db_files/ecmdb/ecmdb.tsv"
#    name: "ECMDB-2018-12"
#    version: "2018-12-13"

nodejs_version: 8.*

sm_graphql_hostname: "{{ web_host }}"  # specify manually in production
sm_graphql_home: "{{ metaspace_home }}/metaspace/graphql"
sm_graphql_slack_webhook_url: ""
sm_graphql_slack_channel: ""
sm_graphql_jwt_secret: "{{ vault_sm_web_jwt_secret }}"
sm_graphql_public_url: "http://{{ sm_graphql_hostname }}/graphql"
sm_graphql_mol_image_host: "{{ sm_graphql_hostname }}"
sm_graphql_img_upload_host: "{{ hostvars['web-1'].ansible_ssh_host }}"
sm_graphql_moldb_service_host: "{{ hostvars['web-1'].ansible_ec2_local_ipv4 }}:5001"
sm_graphql_database_password: "{{ sm_postgres_password }}"
sm_graphql_rabbitmq_host: "{{ rabbitmq_host }}"
sm_graphql_rabbitmq_user: "{{ rabbitmq_user }}"
sm_graphql_rabbitmq_password: "{{ rabbitmq_password }}"
sm_graphql_default_adducts: "{{ sm_default_adducts }}"
sm_graphql_img_storage_backend: fs
sm_graphql_redis_host: "{{ web_redis.host }}"
sm_graphql_redis_port: "{{ web_redis.port }}"
sm_graphql_aws_region: "{{ aws_region }}"
sm_graphql_aws_access_key_id: "{{ vault_sm_web_aws_access_key_id }}"  # sm-web-app user
sm_graphql_aws_secret_access_key: "{{ vault_sm_web_aws_secret_access_key }}"
sm_graphql_upload_destination: s3
sm_graphql_s3_upload_bucket: "{{ vault_sm_web_s3_upload_bucket }}"
sm_graphql_google_client_id: "{{ vault_sm_web_google_client_id }}"
sm_graphql_google_client_secret: "{{ vault_sm_web_google_client_secret }}"
sm_graphql_google_callback_url: "http://{{ sm_webapp_hostname }}/api_auth/google/callback"
sm_graphql_cookie_secret: "{{ vault_sm_web_cookie_secret }}"
sm_graphql_features:
  graphqlMocks: false
  impersonation: true
sm_graphql_metadata_lookups:
  colocalizationAlgos:
    - ['cosine', 'Cosine distance']
  defaultColocalizationAlgo: 'cosine'

sm_webapp_hostname: "{{ web_host }}"  # specify manually in production
sm_webapp_home: "{{ metaspace_home }}/metaspace/webapp"
sm_webapp_aws_region: "{{ aws_region }}"
sm_webapp_aws_access_key_id: "{{ vault_sm_web_aws_access_key_id }}"  # sm-web-app user
sm_webapp_s3_bucket: "{{ vault_sm_web_s3_upload_bucket }}"
sm_webapp_google_client_id: "{{ vault_sm_web_google_client_id }}"
sm_webapp_upload_destination: s3
# metadata types are specified by corresponding filenames in metaspace2020/metadata repository
# "specialised metadata" subfolder
sm_webapp_metadata_types: ["ims"]  # set ["ims", "lcms"] to accept both IMS and LC-MS datasets
sm_webapp_features:
  coloc: true
  ion_thumbs: true
  off_sample: true
  off_sample_col: false
  new_feature_popups: true
  optical_transform: true
  all_dbs: false
  all_adducts: false
  neutral_losses: false
  neutral_losses_new_ds: true
  chem_mods: false
  advanced_ds_config: false

sm_activate_venv: source {{ miniconda_prefix }}/bin/activate {{ miniconda_env.name }}

spark_key_file: ~/.ssh/ubuntu_spark
spark_version: 2.3.3-bin-hadoop2.7
spark_mirror: "{{ vault_spark_mirror }}"
spark_home: /usr/lib/spark
spark_user: ubuntu

elk_enable: false  # set "true" to enable logs aggregation in ELK

spark_env_extras_slave:
  SPARK_WORKER_DIR: /tmp/spark
  SPARK_LOCAL_DIRS: /tmp/spark
  PYSPARK_PYTHON: "{{ miniconda_prefix }}/envs/{{ miniconda_env.name }}/bin/python"

spark_env_extras_master:
  AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
  AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
  PYSPARK_PYTHON: "{{ miniconda_prefix }}/envs/{{ miniconda_env.name }}/bin/python"

slack_channel: "{{ vault_slack_channel }}"
slack_webhook_url: "{{ vault_slack_webhook_url }}"

sentry_dsn: "{{ vault_sentry_dsn }}"

ssl:
  path: ../files
  cert: CERTIFICATE.pem
  key: PRIVATE.key

nginx_upstream_hosts:
  - name: mol_image_server
    server: 127.0.0.1:3020
  - name: isotope_image_server
    server: 127.0.0.1:4201
  - name: graphql_server
    server: 127.0.0.1:3010
  - name: graphql_ws_server
    server: 127.0.0.1:5666
  - name: moldb_server
    server: 127.0.0.1:5001
  - name: kibana_server
    server: 127.0.0.1:5601
  - name: elasticsearch_server
    server: 127.0.0.1:9200

nginx_servers:
  - desc: Kibana redirect
    params:
      - listen 8080;
    locations:
      - path: /
        params:
          - auth_basic "Private Property";
          - auth_basic_user_file /etc/nginx/passwdfile;
          - proxy_pass http://kibana_server;
          - include proxy-params.conf;

  - desc: HTTPS redirect
    params:
      - listen 80 default_server;
      - listen [::]:80 default_server;
      - server_name _;
      - return 301 https://{{ sm_webapp_hostname }}$request_uri;

  - desc: Endpoint for Web App, GraphQL, GraphQL WebSocket, ion images, mol images, and MolDB
    params:
      - server_name {{ sm_webapp_hostname }};
      - listen 443 ssl;
      - ssl_certificate ssl/{{ ssl.cert }};
      - ssl_certificate_key ssl/{{ ssl.key }};
      - proxy_read_timeout 300;
      - send_timeout 300;
    locations:
      - path: /mol-images/
        params:
          - root /var/www;
      # Web app static content
      - path: /
        params:
          - root {{ sm_webapp_home }}/www;
          # Paths with no extension should fall back to index.html for vue-router to handle
          - try_files $uri /index.html;
          - expires 10m;
          # Unfortunately nginx has awkward priority rules with regex locations, so the following rules must be nested
          # to avoid interfering with routing to API endpoints
          # Static assets should cache aggressively and also fall back to the previous version in case
          # someone loads the page during a deployment
          - location ~ ^/(js/.*|css/.*|img/.*|fonts/.*) {
              add_header Cache-Control "public,max-age=31536000,immutable";
              etag off;
              expires off;
              try_files $uri /old_ver/$1 =404;
            }
          # Paths with an extension should 404 instead of falling back to index.html
          - location ~ \.\w*$ {
              try_files $uri =404;
            }
      - path: /db/iso_images/
        params:
          - proxy_pass http://isotope_image_server/db/iso_images/;
          - limit_except GET {deny all;}
      - path: /fs/optical_images/
        params:
          - proxy_pass http://isotope_image_server/fs/optical_images/;
          - limit_except GET {deny all;}
      - path: /fs/raw_optical_images/
        params:
          - proxy_pass http://isotope_image_server/fs/raw_optical_images/;
          - client_max_body_size 50M;
      - path: /fs/ion_thumbnails/
        params:
          - proxy_pass http://isotope_image_server/fs/ion_thumbnails/;
          - limit_except GET {deny all;}
      - path: /dataset_upload
        params:
          - proxy_pass http://isotope_image_server/dataset_upload;
          - client_max_body_size 5M;
      - path: /graphql
        params:
          - proxy_pass http://graphql_server/graphql;
          - include proxy-params.conf;
      - path: /api_auth
        params:
          - proxy_pass http://graphql_server/api_auth;
          - include proxy-params.conf;
      - path: /ws
        params:
          - proxy_pass http://graphql_ws_server/graphql;
          - proxy_http_version 1.1;
          - proxy_set_header Upgrade $http_upgrade;
          - proxy_set_header Connection "upgrade";
          - include proxy-params.conf;
      - path: /mol_db/
        params:
          - proxy_pass http://moldb_server/;
          - include proxy-params.conf;
          - limit_except GET {allow 127.0.0.1/32; deny all;}
          - client_max_body_size 200M;

  - desc: Elasticsearch redirect
    params:
      - listen {{ sm_es_port }};
    locations:
      - path: /
        params:
        - auth_basic "Private Property";
        - auth_basic_user_file /etc/nginx/passwdfile;
        - proxy_pass http://elasticsearch_server;
        - include proxy-params.conf;
        - client_max_body_size 100M;

basic_auth_users:
  - user: "{{ sm_es_user }}"
    password: "{{ sm_es_password }}"
  - user: "{{ kibana_user }}"
    password: "{{ kibana_password }}"

# VIRTUAL MACHINES CONFIGURATION
# no ansible vars are allowed below, used by python scripts

cluster_configuration:
  instances:
    web:
      hostgroup: WEB_HOSTGROUP  # specify a custom name for the group of hosts
      type: r4.large
      n: 1
      elipalloc:  # create manually in AWS console and put the id here to use static IP address
      price:  # put price to use spot instances
      sec_group: default  # update for better security
      image: ami-07174474  # public ubuntu 16.04 at eu-west-1
                           # ami-4d6c0e22 is for eu-central-1
      tags:
        backup: ''
        retention_daily: '2'
        retention_weekly: '7'

      block_dev_maps:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 200
            DeleteOnTermination: True
            VolumeType: gp2

    master:
      hostgroup: MASTER_HOSTGROUP  # specify a custom name for the group of hosts
      type: c4.4xlarge
      n: 1
      elipalloc:
      price:  1.0
      sec_group: default
      image: ami-07174474  # public ubuntu 16.04, create custom AMI and put its id here

      block_dev_maps:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 500
            DeleteOnTermination: True
            VolumeType: gp2

    slave:
      hostgroup: SLAVE_HOSTGROUP  # specify a custom name for the group of hosts
      type: c4.4xlarge
      n: 1
      elipalloc:
      price: 1.0
      sec_group: default
      image: ami-07174474  # public ubuntu 16.04, create custom AMI and put its id here

      block_dev_maps:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 500
            DeleteOnTermination: True
            VolumeType: gp2
# uncomment below if you want to use Elasticsearch for logs aggregation
    elk:
      hostgroup: elk
      type: t3.medium
      n: 1
      elipalloc:
      sec_group: elk
      image: ami-00035f41c82244dab  # Canonical, Ubuntu, 18.04 LTS, amd64 bionic image build on 2018-09-12
      tags:
        backup: ''
        retention_daily: '1'
      block_dev_maps:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 30
            DeleteOnTermination: True
            VolumeType: gp2
