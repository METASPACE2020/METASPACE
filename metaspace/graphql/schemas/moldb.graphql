
type GroupShortInfo {
  id: ID!
  shortName: String!
}

type MolecularDB {
  id: Int!
  name: String!
  version: String!
  createdDT: String!
  default: Boolean!
  # True if database is deprecated/superseded and would not be useful for most users
  hidden: Boolean! @deprecated(reason: "Use archived field instead")
  isPublic: Boolean!
  archived: Boolean!  # Cannot be used for dataset processing
  targeted: Boolean!  # If true keep all annotations regardless of their FDR
  fullName: String
  description: String
  link: String
  citation: String
  group: GroupShortInfo
}

input CreateMolecularDBInput {
  name: String!
  version: String!
  filePath: String!
  isPublic: Boolean! = False
  groupId: ID!
  fullName: String
  description: String
  link: String
  citation: String  # JSON-based rich text, in a format defined by tiptap (https://tiptap.scrumpy.io/)
}

input UpdateMolecularDBInput {
  archived: Boolean
  isPublic: Boolean
  fullName: String
  description: String
  link: String
  citation: String  # JSON-based rich text, in a format defined by tiptap (https://tiptap.scrumpy.io/)
}

type Query {
  visibleMolecularDBs: [MolecularDB!]
  usableMolecularDBs: [MolecularDB!]
  metaspaceMolecularDBs: [MolecularDB!]
  getMolecularDB(databaseId: Int!): MolecularDB!
}

type Mutation {
  createMolecularDB(databaseDetails: CreateMolecularDBInput!): MolecularDB!
  updateMolecularDB(databaseId: Int!, databaseDetails: UpdateMolecularDBInput!): MolecularDB!
  deleteMolecularDB(databaseId: Int!): Boolean!
}
