enum PublicationStatus {
  UNPUBLISHED
  UNDER_REVIEW
  PUBLISHED
}

type Project {
  id: ID!
  name: String!
  isPublic: Boolean!
  urlSlug: String
  currentUserRole: UserProjectRole
  hasPendingRequest: Boolean  # null if current user is not allowed to see
  members: [UserProject!]    # null if current user is not allowed to see
  numMembers: Int!
  numDatasets: Int!
  createdDT: String!
  latestUploadDT: String
  projectDescriptionAsHtml: String
  reviewToken: String
  publicationStatus: PublicationStatus!
}

input CreateProjectInput {
  name: String!
  isPublic: Boolean!
  urlSlug: String
}

input UpdateProjectInput {
  name: String
  isPublic: Boolean
  urlSlug: String
  projectDescriptionAsHtml: String
}

input UpdateUserProjectInput {
  role: UserProjectRole
}

# Many-to-many relationship between User and Project
type UserProject {
  user: User!
  project: Project!
  role: UserProjectRole!
  numDatasets: Int!
}

enum UserProjectRole {
  INVITED    # User was invited into the project but hasn't confirmed it yet
  PENDING    # User requested to join the project but the PI hasn't confirmed it yet
  MEMBER     # Normal member of the project
  MANAGER    # Project administrator
  REVIEWER   # Anonymous user with read-only access to specified projects
}

type Query {
  project(projectId: ID!): Project
  projectByUrlSlug(urlSlug: String!): Project
  allProjects(query: String, offset: Int = 0, limit: Int = 10): [Project!]!
  projectsCount(query: String): Int!
}

type Mutation {
  ## Managing projects
  createProject(projectDetails: CreateProjectInput!): Project!
  updateProject(projectId: ID!, projectDetails: UpdateProjectInput!): Project!
  deleteProject(projectId: ID!): Boolean!

  ## Managing project users
  leaveProject(projectId: ID!): Boolean!
  removeUserFromProject(projectId: ID!, userId: ID!): Boolean!

  ## User requests access
  requestAccessToProject(projectId: ID!): UserProject!
  acceptRequestToJoinProject(projectId: ID!, userId: ID!): UserProject!
  # User can reject request with `leaveProject`

  ## Project invites user
  inviteUserToProject(projectId: ID!, email: String!): UserProject!
  acceptProjectInvitation(projectId: ID!): UserProject!
  # Project can reject user with `removeUserFromProject`

  updateUserProject(projectId: ID!, userId: ID!, update: UpdateUserProjectInput!): Boolean!

  importDatasetsIntoProject(projectId: ID!, datasetIds: [ID!]!): Boolean!

  # Managing review links
  createReviewLink(projectId: ID!): Project!
  deleteReviewLink(projectId: ID!): Boolean!

  # Project publishing
  publishProject(projectId: ID!): Project!
}
