type Person {
  name: String!
  email: String    # null if current user is not allowed to see
}

input PersonInput {
  name: String!
  email: String!
}

type SubmitterSearchResult {
  id: ID!
  name: String!
}

enum Polarity {
  POSITIVE
  NEGATIVE
}

type Analyzer {
  type: String!
  resolvingPower(mz: Float!): Float!
}

enum AnnotationOrderBy {
  ORDER_BY_MZ
  ORDER_BY_MSM
  ORDER_BY_FDR_MSM
  ORDER_BY_DATASET
  ORDER_BY_FORMULA
}

enum DatasetOrderBy {
  ORDER_BY_DATE
  ORDER_BY_NAME
}

enum SortingOrder {
  ASCENDING,
  DESCENDING
}

enum JobStatus {
  NEW,
  QUEUED,
  ANNOTATING,
  INDEXING,
  FINISHED,
  FAILED
}

type FdrCounts {
  dbName: String!
  levels: [Float!]!
  counts: [Float!]!
}

type CompoundInfoEntry {
  database: String!
  url: String
  databaseId: String!
}

type Compound {
  name: String!
  imageURL: String
  information: [CompoundInfoEntry]
  # TODO: InChi/SMILES, ClassyFire results
}

type Adduct {
  adduct: String!
  charge: Int!
}

type Spectrum {
  mzs: [Float!]!
  intensities: [Float!]!
}

type MzImage {
  mz: Float
  url: String
  totalIntensity: Float!
  minIntensity: Float!
  maxIntensity: Float!
}

type MolecularDatabase {
  id: Int!
  name: String!
  version: String!
  default: Boolean!
}

type Annotation {
  id: String!

  dataset: Dataset!
  sumFormula: String!
  adduct: String!
  mz: Float!
  possibleCompounds: [Compound!]!
  fdrLevel: Float!
  msmScore: Float!
  rhoSpatial: Float
  rhoSpectral: Float
  rhoChaos: Float
  isotopeImages: [MzImage!]!

  peakChartData: String  # JSON
}

# [min, max) interval
input NumericRange {
  min: Float!
  max: Float!
}

input AnnotationFilter {
  database: String
  datasetName: String
  mzFilter: NumericRange
  msmScoreFilter: NumericRange
  compoundQuery: String
  fdrLevel: Float
  sumFormula: String
  adduct: String
}

type Query {
  allAnnotations(orderBy: AnnotationOrderBy = ORDER_BY_MSM,
                 sortingOrder: SortingOrder = DESCENDING,
                 offset: Int = 0, limit: Int = 10,
                 filter: AnnotationFilter = {},
                 datasetFilter: DatasetFilter = {},
                 simpleQuery: String): [Annotation]

  countAnnotations(filter: AnnotationFilter = {},
                   datasetFilter: DatasetFilter = {},
                   simpleQuery: String): Int!

  annotation(id: String!): Annotation

  metadataSuggestions(field: String!, query: String!, limit: Int = 10): [String!]!

  submitterSuggestions(query: String!): [SubmitterSearchResult!]!

  molecularDatabases(hideDeprecated: Boolean=true,
    onlyLastVersion: Boolean=true): [MolecularDatabase!]

  adductSuggestions: [Adduct!]!
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
